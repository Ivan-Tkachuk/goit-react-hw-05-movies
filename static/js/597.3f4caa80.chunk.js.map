{"version":3,"file":"static/js/597.3f4caa80.chunk.js","mappings":"qNA+DA,UAxDa,WACT,IAAOA,GAAWC,EAAAA,EAAAA,MAAXD,QAEP,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAkCA,OAhCAC,EAAAA,EAAAA,YAAU,WAQN,KAEIC,EAAAA,EAAAA,IAAaN,GAASO,MAAK,SAAAC,GAEvBC,QAAQC,IAAI,QAASF,GACrBJ,EAAaI,EAASG,KAEzB,GAWJ,CAHC,MAAOC,GACLH,QAAQC,IAAI,UAAWE,EAE1B,CACJ,GAAE,CAACZ,IAEJS,QAAQC,IAAIP,EAAUU,SAIlB,8BACNV,EAAUU,QAAkC,0BAE9C,wBACCV,EAAUW,KAAI,YAAsC,IAApCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UACrC,OAAQ,2BACJ,gBAAKC,IAAKH,EAAa,kCAAD,OAAoCA,GAAgBI,EAAiBC,IAAKJ,KAChG,uBAAIA,KACJ,uCAAeC,QAHFI,EAAAA,EAAAA,MAKhB,SATqB,2CAcrB,C,iMCzDKC,EAAU,mCAEHC,EAAe,mCAAG,0FACV,gCADU,SAQJC,EAAAA,EAAAA,IAAA,UAPN,gCAOM,uCAAoDF,IARhD,cAQrBd,EARqB,yBAUpBA,EAASiB,MAVW,2CAAH,qDAqBbC,EAAc,mCAAG,WAAO1B,GAAP,6EACX,gCADW,SAGLwB,EAAAA,EAAAA,IAAA,UAFN,gCAEM,iBACDxB,EADC,qBACmBsB,EADnB,oBAHK,cAGtBd,EAHsB,yBAOnBA,EAASiB,MAPU,2CAAH,sDAgBdnB,EAAY,mCAAG,WAAON,GAAP,6EACT,gCADS,SAGHwB,EAAAA,EAAAA,IAAA,UAFN,gCAEM,iBACDxB,EADC,6BAC2BsB,EAD3B,0BAHG,cAGpBd,EAHoB,yBAOjBA,EAASiB,MAPQ,2CAAH,sDAgBZE,EAAe,mCAAG,WAAO3B,GAAP,6EACZ,gCADY,SAGNwB,EAAAA,EAAAA,IAAA,UAFN,gCAEM,iBACDxB,EADC,6BAC2BsB,EAD3B,2BAHM,cAGvBd,EAHuB,yBAOpBA,EAASiB,MAPW,2CAAH,sDAgBfG,EAAc,mCAAG,WAAOC,GAAP,6EACX,gCADW,SAGLL,EAAAA,EAAAA,IAAA,UAFN,gCAEM,kCACgBF,EADhB,4DAC2EO,IAJtE,cAGtBrB,EAHsB,yBAOnBA,EAASiB,MAPU,2CAAH,qD,mJCzEtB,IAkBIJ,EAAS,eAACS,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Cast.jsx","services/themoviedbAPI.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieCast } from \"services/themoviedbAPI\";\n// import Loader from \"../components/Loader/Loader\";\nimport pictureNotFound from \"../pages/pictureNotFound.jpg\";\n\nconst Cast = () => {\n    const {movieId} = useParams();\n    // const [isLoading, setIsLoading] = useState(false);\n    const [movieCast, setMovieCast] = useState([]);\n\n    useEffect(() => {\n\n        // const showNotification = data => {\n        //     if (data.succsess === false) {\n        //       toast.error(`There is't results`);\n        //     }\n        //   };\n    \n        try {\n            // setIsLoading(true);\n            getMovieCast(movieId).then(response => {\n                // showNotification(data);\n                console.log('resp:', response);\n                setMovieCast(response.cast);\n                // setIsLoading(false);\n            });\n            \n            // .catch(function (error) {\n            //     console.log(error.toJSON());\n            //     // setError(true);\n            //   });\n    \n    \n        } catch (error) {\n            console.log('error: ', error);\n            // setIsLoading(false);\n        }\n    }, [movieId]);\n\n    console.log(movieCast.length);\n\n\n    return (\n        <>\n{!movieCast.length ? (<p>No information</p>):(<div>\n{/* {isLoading && <Loader />} */}\n<ul>\n{movieCast.map(({profile_path, name, character}) => {\nreturn (<li key={nanoid()}> \n    <img src={profile_path? `https://image.tmdb.org/t/p/w500${profile_path}`: pictureNotFound} alt={name} />\n    <p>{name}</p>\n    <p>Character: {character}</p>\n    </li>);\n}) }\n</ul>\n</div>)}\n</>\n    ); \n}\n\n\nexport default Cast;","import axios from \"axios\";\n\n\nconst API_KEY = '148c9397aa3eec308089adaec56ced74';\n\nexport const getTrendingList = async () => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n  \n    // if (abortController.current) {\n    //   abortController.current.abort();\n    // }\n    // abortController.current = new AbortController();\n  \n    const response = await axios.get(`${BASE_URL}trending/movie/day?&api_key=${API_KEY}`\n    );\n    return response.data;\n\n    // if (response.ok) {\n    //   return response.json();\n    // }\n    // return await Promise.reject(\n    //   new Error(`There is't result`)\n    // );\n  };\n\n\n  export const getMovieDetail = async (movieId) => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n  \n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}?&api_key=${API_KEY}&language=en-US`\n    );\n\n      return response.data;\n    // if (response.ok) {\n    //   return response.json();\n    // }\n    // return await Promise.reject(\n    //   new Error(`There is't result`)\n    // );\n  };\n\n  export const getMovieCast = async (movieId) => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n  \n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/credits?&api_key=${API_KEY}&language=en-USpage=1`\n    );\n\n      return response.data;\n    // if (response.ok) {\n    //   return response.json();\n    // }\n    // return await Promise.reject(\n    //   new Error(`There is't result`)\n    // );\n  };\n\n  export const getMovieReviews = async (movieId) => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n  \n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/reviews?&api_key=${API_KEY}&language=en-US&page=1`\n    );\n\n      return response.data;\n    // if (response.ok) {\n    //   return response.json();\n    // }\n    // return await Promise.reject(\n    //   new Error(`There is't result`)\n    // );\n  };\n\n  export const getMovieSearch = async (query) => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n  \n    const response = await axios.get(\n      `${BASE_URL}/search/movie?&api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n    );\n\n      return response.data;\n    // if (response.ok) {\n    //   return response.json();\n    // }\n    // return await Promise.reject(\n    //   new Error(`There is't result`)\n    // );\n  };\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["movieId","useParams","useState","movieCast","setMovieCast","useEffect","getMovieCast","then","response","console","log","cast","error","length","map","profile_path","name","character","src","pictureNotFound","alt","nanoid","API_KEY","getTrendingList","axios","data","getMovieDetail","getMovieReviews","getMovieSearch","query","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}