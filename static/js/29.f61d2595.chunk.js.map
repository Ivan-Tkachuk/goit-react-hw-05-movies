{"version":3,"file":"static/js/29.f61d2595.chunk.js","mappings":"4QAEaA,EAAUC,EAAAA,EAAAA,GAAH,2RAaPC,EAAcD,EAAAA,EAAAA,GAAH,oTAWXE,EAAmBF,EAAAA,EAAAA,IAAH,qFAOhBG,EAAQH,EAAAA,EAAAA,EAAH,iH,SCmBlB,EA5Ca,WACX,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAYA,OAVAC,EAAAA,EAAAA,YAAU,WACR,KACEC,EAAAA,EAAAA,IAAaN,GAASO,MAAK,SAAAC,GACzBJ,EAAaI,EAASC,KACvB,GAGF,CAFC,MAAOC,GACPC,QAAQC,IAAI,UAAWF,EACxB,CACF,GAAE,CAACV,KAGF,8BACIG,EAAUU,QAGV,0BACE,SAAClB,EAAD,UACGQ,EAAUW,KAAI,YAAwC,IAArCC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACpC,OACE,UAACpB,EAAD,YACE,SAACC,EAAD,CACEoB,IACEH,EAAY,yCAC0BA,GAClCI,EAENC,IAAKJ,KAEP,SAACjB,EAAD,UAAQiB,KACR,UAACjB,EAAD,yBAAmBkB,QAVHI,EAAAA,EAAAA,MAarB,SAnBL,2CAyBP,C,iMChDKC,EAAU,mCAEHC,EAAe,mCAAG,0FACZ,gCADY,SAGNC,EAAAA,EAAAA,IAAA,UAFN,gCAEM,uCACqBF,IAJf,cAGvBd,EAHuB,yBAMtBA,EAASiB,MANa,2CAAH,qDASfC,EAAc,mCAAG,WAAM1B,GAAN,6EACX,gCADW,SAGLwB,EAAAA,EAAAA,IAAA,UAFN,gCAEM,iBACDxB,EADC,qBACmBsB,EADnB,oBAHK,cAGtBd,EAHsB,yBAOrBA,EAASiB,MAPY,2CAAH,sDAUdnB,EAAY,mCAAG,WAAMN,GAAN,6EACT,gCADS,SAGHwB,EAAAA,EAAAA,IAAA,UAFN,gCAEM,iBACDxB,EADC,6BAC2BsB,EAD3B,0BAHG,cAGpBd,EAHoB,yBAOnBA,EAASiB,MAPU,2CAAH,sDAUZE,EAAe,mCAAG,WAAM3B,GAAN,6EACZ,gCADY,SAGNwB,EAAAA,EAAAA,IAAA,UAFN,gCAEM,iBACDxB,EADC,6BAC2BsB,EAD3B,2BAHM,cAGvBd,EAHuB,yBAOtBA,EAASiB,MAPa,2CAAH,sDAUfG,EAAc,mCAAG,WAAMC,GAAN,6EACX,gCADW,SAGLL,EAAAA,EAAAA,IAAA,UAFN,gCAEM,kCACgBF,EADhB,4DAC2EO,IAJtE,cAGtBrB,EAHsB,yBAOrBA,EAASiB,MAPY,2CAAH,qD,mJC1CpB,IAkBIJ,EAAS,eAACS,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Cast.styled.jsx","components/Cast.jsx","services/themoviedbAPI.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Gallery = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 15px;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const GalleryItem = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n\nexport const GalleryItemImage = styled.img`\n  width: 100%;\n  height: 300px;\n  object-fit: cover;\n  }\n`;\n\nexport const Title = styled.p`\n  text-decoration: none;\n  text-align: center;\n  color: #212121;\n  font-weight: 500;\n`;\n","import { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/themoviedbAPI';\n\nimport pictureNotFound from '../pages/pictureNotFound.jpg';\nimport { Gallery, GalleryItem, GalleryItemImage, Title } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n\n  useEffect(() => {\n    try {\n      getMovieCast(movieId).then(response => {\n        setMovieCast(response.cast);\n      });\n    } catch (error) {\n      console.log('error: ', error);\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {!movieCast.length ? (\n        <p>No information</p>\n      ) : (\n        <div>\n          <Gallery>\n            {movieCast.map(({ profile_path, name, character }) => {\n              return (\n                <GalleryItem key={nanoid()}>\n                  <GalleryItemImage\n                    src={\n                      profile_path\n                        ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                        : pictureNotFound\n                    }\n                    alt={name}\n                  />\n                  <Title>{name}</Title>\n                  <Title>Character: {character}</Title>\n                </GalleryItem>\n              );\n            })}\n          </Gallery>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '148c9397aa3eec308089adaec56ced74';\n\nexport const getTrendingList = async () => {\n  const BASE_URL = 'https://api.themoviedb.org/3/';\n\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getMovieDetail = async movieId => {\n  const BASE_URL = 'https://api.themoviedb.org/3/';\n\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}?&api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data;\n};\n\nexport const getMovieCast = async movieId => {\n  const BASE_URL = 'https://api.themoviedb.org/3/';\n\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?&api_key=${API_KEY}&language=en-USpage=1`\n  );\n\n  return response.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const BASE_URL = 'https://api.themoviedb.org/3/';\n\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews?&api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return response.data;\n};\n\nexport const getMovieSearch = async query => {\n  const BASE_URL = 'https://api.themoviedb.org/3/';\n\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?&api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n\n  return response.data;\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Gallery","styled","GalleryItem","GalleryItemImage","Title","movieId","useParams","useState","movieCast","setMovieCast","useEffect","getMovieCast","then","response","cast","error","console","log","length","map","profile_path","name","character","src","pictureNotFound","alt","nanoid","API_KEY","getTrendingList","axios","data","getMovieDetail","getMovieReviews","getMovieSearch","query","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}