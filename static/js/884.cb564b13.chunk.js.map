{"version":3,"file":"static/js/884.cb564b13.chunk.js","mappings":"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","sources":["pages/MovieDetails.jsx","services/themoviedbAPI.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { Outlet, useLocation, useParams } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { getMovieDetail } from \"services/themoviedbAPI\";\nimport Loader from \"../components/Loader/Loader\";\nimport pictureNotFound from \"../pages/pictureNotFound.jpg\";\nimport { Suspense } from \"react\";\nimport { isEmpty } from \"lodash\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst FilmDetails = () => {\n    const [movieDetail, setMovieDetail] = useState({});\n    const {movieId} = useParams();\n    const location = useLocation();\n    const backLinkLocationRef = useRef(location.state?.from ?? `/`);\n    // const [error, setError] = useState(false);\n\n    // const abortController = useRef();\n\nuseEffect(() => {\n\n    // const showNotification = data => {\n    //     if (data.succsess === false) {\n    //       toast.error(`There is't results`);\n    //     }\n    //   };\n\n    try {\n        getMovieDetail(movieId).then(response => {\n            // showNotification(data);\n            setMovieDetail(response);\n            \n        })\n        \n        .catch(function (error) {\n            console.log(error.toJSON());\n            toast.error(`There is't results`);\n            // setError(true);\n          });\n\n\n    } catch (error) {\n        console.log('error: ', error);\n        toast.error(`There is't results`);\n    }\n\n}, [movieId])\n\nconsole.log(movieDetail);\n\nconst {id, poster_path, title, release_date='', vote_average, overview, genres} = movieDetail;\n\n    return (\n<>\n<Link to={backLinkLocationRef.current}><button type=\"button\">Go back</button></Link>\n\n{(!isEmpty(movieDetail) && movieId === String(id)) && (\n    <>\n    <div>\n    \n<div>\n    <img src={poster_path? `https://image.tmdb.org/t/p/w500${poster_path}`: pictureNotFound} alt={title} />\n    <div>\n        <h1>{title} {`(${release_date.slice(0, 4)})`}</h1> \n        <p>User Score: {vote_average? `${Math.round(vote_average*10)}%`: `No information`}</p>\n        <h2>Overview</h2>\n        <p>{overview}</p>\n\n\n        <h2>Genres</h2>\n\n       <p>{(genres || []).length === 0 ? 'No information': genres.map(genre=> genre.name).join(', ')}</p> \n\n    </div>\n    \n</div>\n</div>\n<p>Additional Information: </p>\n<ul>\n    <li>\n        <Link to=\"cast\">Cast</Link>\n    </li>\n    <li>\n    <Link to=\"reviews\">Reviews</Link>\n    </li>\n</ul>\n</>\n) }\n\n\n\n<Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n      <ToastContainer autoClose={3000} />\n</>\n    ) \n}\n\nexport default FilmDetails;","import axios from \"axios\";\n\n\nconst API_KEY = '148c9397aa3eec308089adaec56ced74';\n\nexport const getTrendingList = async () => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n  \n    // if (abortController.current) {\n    //   abortController.current.abort();\n    // }\n    // abortController.current = new AbortController();\n  \n    const response = await axios.get(`${BASE_URL}trending/movie/day?&api_key=${API_KEY}`\n    );\n    return response.data;\n\n    // if (response.ok) {\n    //   return response.json();\n    // }\n    // return await Promise.reject(\n    //   new Error(`There is't result`)\n    // );\n  };\n\n\n  export const getMovieDetail = async (movieId) => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n  \n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}?&api_key=${API_KEY}&language=en-US`\n    );\n\n      return response.data;\n    // if (response.ok) {\n    //   return response.json();\n    // }\n    // return await Promise.reject(\n    //   new Error(`There is't result`)\n    // );\n  };\n\n  export const getMovieCast = async (movieId) => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n  \n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/credits?&api_key=${API_KEY}&language=en-USpage=1`\n    );\n\n      return response.data;\n    // if (response.ok) {\n    //   return response.json();\n    // }\n    // return await Promise.reject(\n    //   new Error(`There is't result`)\n    // );\n  };\n\n  export const getMovieReviews = async (movieId) => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n  \n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/reviews?&api_key=${API_KEY}&language=en-US&page=1`\n    );\n\n      return response.data;\n    // if (response.ok) {\n    //   return response.json();\n    // }\n    // return await Promise.reject(\n    //   new Error(`There is't result`)\n    // );\n  };\n\n  export const getMovieSearch = async (query) => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n  \n    const response = await axios.get(\n      `${BASE_URL}/search/movie?&api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n    );\n\n      return response.data;\n    // if (response.ok) {\n    //   return response.json();\n    // }\n    // return await Promise.reject(\n    //   new Error(`There is't result`)\n    // );\n  };\n"],"names":["useState","movieDetail","setMovieDetail","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","getMovieDetail","then","response","catch","error","console","log","toJSON","toast","id","poster_path","title","release_date","vote_average","overview","genres","to","current","type","isEmpty","String","src","pictureNotFound","alt","slice","Math","round","length","map","genre","name","join","Suspense","fallback","autoClose","API_KEY","getTrendingList","axios","data","getMovieCast","getMovieReviews","getMovieSearch","query"],"sourceRoot":""}