{"version":3,"file":"static/js/134.eacdecd4.chunk.js","mappings":"oPA2GA,UAnGe,WAAO,IAAD,EACjB,GAAwCA,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAErCC,GAAWC,EAAAA,EAAAA,OAGjBC,EAAAA,EAAAA,YAAU,WAQN,KAEIC,EAAAA,EAAAA,GAAeL,GAAOM,MAAK,SAAAC,GACvBX,GAAgB,OAAIW,EAASC,UAE7BC,QAAQC,IAAIH,EAASC,QAExB,GAWJ,CAHC,MAAOG,GACLF,QAAQC,IAAI,UAAWC,EAE1B,EACDN,EAAAA,EAAAA,IACH,GAAE,CAACL,IAuBRS,QAAQC,IAAIV,GAiBR,OACI,4BAMR,kBAAMY,SAtBe,SAAAC,GACjBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cAEf,GAAkC,KAA9BD,EAAKE,SAASjB,MAAMkB,MAEpB,OADAC,EAAAA,GAAAA,QAAA,4BACOpB,EAAgB,CAAC,GAChBgB,EAAKE,SAASjB,MAAMkB,OAASvB,GACrCwB,EAAAA,GAAAA,QAAA,uCAA8CnB,IAEjDD,EAAgB,CAAEC,MAAOe,EAAKE,SAASjB,MAAMkB,QAC9CH,EAAKK,OACN,EAUH,WACA,kBAAOC,KAAK,OAAOC,KAAK,WAChB,mBAAQD,KAAK,SAAb,wBAII,wBACC1B,EAAa4B,KAAI,SAAAC,GACd,OAAO,yBAAmB,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAACC,KAAM1B,GAAvC,SAAmDsB,EAAMK,UAAnEC,EAAAA,EAAAA,MACnB,OAEL,SAAC,KAAD,CAAgBC,UAAW,QAGlC,C,iMCtGKC,EAAU,mCAEHC,EAAe,mCAAG,0FACV,gCADU,SAQJC,EAAAA,EAAAA,IAAA,UAPN,gCAOM,uCAAoDF,IARhD,cAQrBzB,EARqB,yBAUpBA,EAAS4B,MAVW,2CAAH,qDAqBbC,EAAc,mCAAG,WAAOC,GAAP,6EACX,gCADW,SAGLH,EAAAA,EAAAA,IAAA,UAFN,gCAEM,iBACDG,EADC,qBACmBL,EADnB,oBAHK,cAGtBzB,EAHsB,yBAOnBA,EAAS4B,MAPU,2CAAH,sDAgBdG,EAAY,mCAAG,WAAOD,GAAP,6EACT,gCADS,SAGHH,EAAAA,EAAAA,IAAA,UAFN,gCAEM,iBACDG,EADC,6BAC2BL,EAD3B,0BAHG,cAGpBzB,EAHoB,yBAOjBA,EAAS4B,MAPQ,2CAAH,sDAgBZI,EAAe,mCAAG,WAAOF,GAAP,6EACZ,gCADY,SAGNH,EAAAA,EAAAA,IAAA,UAFN,gCAEM,iBACDG,EADC,6BAC2BL,EAD3B,2BAHM,cAGvBzB,EAHuB,yBAOpBA,EAAS4B,MAPW,2CAAH,sDAgBf9B,EAAc,mCAAG,WAAOL,GAAP,6EACX,gCADW,SAGLkC,EAAAA,EAAAA,IAAA,UAFN,gCAEM,kCACgBF,EADhB,4DAC2EhC,IAJtE,cAGtBO,EAHsB,yBAOnBA,EAAS4B,MAPU,2CAAH,qD,wDCzEtB,IAkBIL,EAAS,eAACU,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAClB,EAAImB,GAWvD,OAREnB,IAFFmB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["pages/Movies.jsx","services/themoviedbAPI.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Link, useLocation, useSearchParams } from \"react-router-dom\";\nimport { getMovieSearch } from \"services/themoviedbAPI\";\nimport { nanoid } from 'nanoid';\n// import Loader from \"components/Loader/Loader\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Movies = () => {\n    const [searchMovies, setSearchMovies] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('query') ?? '';\n    // const [isLoading, setIsLoading] = useState(false);\n    const location = useLocation();\n\n\n    useEffect(() => {\n\n        // const showNotification = data => {\n        //     if (data === []) {\n        //       console.log(`There is't results`);\n        //     }\n        //   };\n    \n        try {\n            // setIsLoading(true);\n            getMovieSearch(query).then(response => {\n                setSearchMovies([...response.results]);\n                // showNotification(response.results);\n                console.log(response.results);\n                // setIsLoading(false);\n            });\n            \n            // .catch(function (error) {\n            //     console.log(error.toJSON());\n            //     // setError(true);\n            //   });\n    \n    \n        } catch (error) {\n            console.log('error: ', error);\n            // setIsLoading(false);\n        }\n        getMovieSearch();\n    }, [query])\n\n// const updateQueryString = evt => {\n//     evt.preventDefault();\n\n//     if (evt.target.value === '') {\n//        return setSearchParams({});\n//     }\n//     setSearchParams({ query: evt.target.value})\n// }\n\n// const visibleMovies = searchMovies.filter(movie => movie.title.includes(query));\n    \n\n// const handleSubmit = event => {\n//     event.preventDefault();\n\n//     if (query.trim() === '') {\n//       return console.log('Enter the search name please');\n//     }\n\n//   };\n\nconsole.log(query);\n\nconst handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n\n    if (form.elements.query.value === '') {\n        toast.warning(`Please, enter movie name`);\n        return setSearchParams({});\n     } else if (form.elements.query.value && searchMovies) {\n        toast.warning(`There isn't result with name ${query}`);\n     }\n     setSearchParams({ query: form.elements.query.value})\n    form.reset();\n  };\n\n\n    return (\n        <div>\n            {/* <input type=\"text\"\n            value={query}\n            onChange={updateQueryString}\n            /> */}\n\n<form onSubmit={handleSubmit}>\n<input type=\"text\" name=\"query\" />\n        <button type=\"submit\">Search</button>\n  </form>\n  {/* {isLoading && <Loader />} */}\n\n            <ul>  \n            {searchMovies.map(movie => {\n                return <li key={nanoid()}><Link to={`${movie.id}`} state={{from: location}}>{movie.title}</Link></li>;\n            }) }\n        </ul>\n        <ToastContainer autoClose={3000} />\n        </div>\n    )\n}\n\nexport default Movies;","import axios from \"axios\";\n\n\nconst API_KEY = '148c9397aa3eec308089adaec56ced74';\n\nexport const getTrendingList = async () => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n  \n    // if (abortController.current) {\n    //   abortController.current.abort();\n    // }\n    // abortController.current = new AbortController();\n  \n    const response = await axios.get(`${BASE_URL}trending/movie/day?&api_key=${API_KEY}`\n    );\n    return response.data;\n\n    // if (response.ok) {\n    //   return response.json();\n    // }\n    // return await Promise.reject(\n    //   new Error(`There is't result`)\n    // );\n  };\n\n\n  export const getMovieDetail = async (movieId) => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n  \n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}?&api_key=${API_KEY}&language=en-US`\n    );\n\n      return response.data;\n    // if (response.ok) {\n    //   return response.json();\n    // }\n    // return await Promise.reject(\n    //   new Error(`There is't result`)\n    // );\n  };\n\n  export const getMovieCast = async (movieId) => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n  \n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/credits?&api_key=${API_KEY}&language=en-USpage=1`\n    );\n\n      return response.data;\n    // if (response.ok) {\n    //   return response.json();\n    // }\n    // return await Promise.reject(\n    //   new Error(`There is't result`)\n    // );\n  };\n\n  export const getMovieReviews = async (movieId) => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n  \n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/reviews?&api_key=${API_KEY}&language=en-US&page=1`\n    );\n\n      return response.data;\n    // if (response.ok) {\n    //   return response.json();\n    // }\n    // return await Promise.reject(\n    //   new Error(`There is't result`)\n    // );\n  };\n\n  export const getMovieSearch = async (query) => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n  \n    const response = await axios.get(\n      `${BASE_URL}/search/movie?&api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n    );\n\n      return response.data;\n    // if (response.ok) {\n    //   return response.json();\n    // }\n    // return await Promise.reject(\n    //   new Error(`There is't result`)\n    // );\n  };\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","searchMovies","setSearchMovies","useSearchParams","searchParams","setSearchParams","query","get","location","useLocation","useEffect","getMovieSearch","then","response","results","console","log","error","onSubmit","e","preventDefault","form","currentTarget","elements","value","toast","reset","type","name","map","movie","to","id","state","from","title","nanoid","autoClose","API_KEY","getTrendingList","axios","data","getMovieDetail","movieId","getMovieCast","getMovieReviews","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}