{"version":3,"file":"static/js/681.e6640b13.chunk.js","mappings":"4MA0CA,UArCgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwCE,EAAAA,EAAAA,UAAS,CAAC,GAAlD,eAAOC,EAAP,KAAqBC,EAArB,KAYA,OAVAC,EAAAA,EAAAA,YAAU,WACR,KACEC,EAAAA,EAAAA,IAAgBN,GAASO,MAAK,SAAAC,GAC5BJ,EAAgBI,EAASC,QAC1B,GAGF,CAFC,MAAOC,GACPC,QAAQC,IAAI,UAAWF,EACxB,CACF,GAAE,CAACV,KAGF,8BACIG,EAAaU,QAGb,0BACE,wBACGV,EAAaW,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3B,OACE,2BACE,qCAAaD,MACb,uBAAIC,OAFGC,EAAAA,EAAAA,MAKZ,SAXL,oEAiBP,C,iMCtCKC,EAAU,mCAEHC,EAAe,mCAAG,0FACZ,gCADY,SAGNC,EAAAA,EAAAA,IAAA,UAFN,gCAEM,uCACqBF,IAJf,cAGvBV,EAHuB,yBAMtBA,EAASa,MANa,2CAAH,qDASfC,EAAc,mCAAG,WAAMtB,GAAN,6EACX,gCADW,SAGLoB,EAAAA,EAAAA,IAAA,UAFN,gCAEM,iBACDpB,EADC,qBACmBkB,EADnB,oBAHK,cAGtBV,EAHsB,yBAOrBA,EAASa,MAPY,2CAAH,sDAUdE,EAAY,mCAAG,WAAMvB,GAAN,6EACT,gCADS,SAGHoB,EAAAA,EAAAA,IAAA,UAFN,gCAEM,iBACDpB,EADC,6BAC2BkB,EAD3B,0BAHG,cAGpBV,EAHoB,yBAOnBA,EAASa,MAPU,2CAAH,sDAUZf,EAAe,mCAAG,WAAMN,GAAN,6EACZ,gCADY,SAGNoB,EAAAA,EAAAA,IAAA,UAFN,gCAEM,iBACDpB,EADC,6BAC2BkB,EAD3B,2BAHM,cAGvBV,EAHuB,yBAOtBA,EAASa,MAPa,2CAAH,sDAUfG,EAAc,mCAAG,WAAMC,GAAN,6EACX,gCADW,SAGLL,EAAAA,EAAAA,IAAA,UAFN,gCAEM,kCACgBF,EADhB,4DAC2EO,IAJtE,cAGtBjB,EAHsB,yBAOrBA,EAASa,MAPY,2CAAH,qD,wDC1CpB,IAkBIJ,EAAS,eAACS,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Reviews.jsx","services/themoviedbAPI.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from '../services/themoviedbAPI';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [movieReviews, setMovieReviews] = useState({});\n\n  useEffect(() => {\n    try {\n      getMovieReviews(movieId).then(response => {\n        setMovieReviews(response.results);\n      });\n    } catch (error) {\n      console.log('error: ', error);\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {!movieReviews.length ? (\n        <p>We don`t have any rewiews on this movie</p>\n      ) : (\n        <div>\n          <ul>\n            {movieReviews.map(({ author, content }) => {\n              return (\n                <li key={nanoid()}>\n                  <h3>Author: {author}</h3>\n                  <p>{content}</p>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '148c9397aa3eec308089adaec56ced74';\n\nexport const getTrendingList = async () => {\n  const BASE_URL = 'https://api.themoviedb.org/3/';\n\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?&api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getMovieDetail = async movieId => {\n  const BASE_URL = 'https://api.themoviedb.org/3/';\n\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}?&api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data;\n};\n\nexport const getMovieCast = async movieId => {\n  const BASE_URL = 'https://api.themoviedb.org/3/';\n\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?&api_key=${API_KEY}&language=en-USpage=1`\n  );\n\n  return response.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const BASE_URL = 'https://api.themoviedb.org/3/';\n\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews?&api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return response.data;\n};\n\nexport const getMovieSearch = async query => {\n  const BASE_URL = 'https://api.themoviedb.org/3/';\n\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?&api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n\n  return response.data;\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["movieId","useParams","useState","movieReviews","setMovieReviews","useEffect","getMovieReviews","then","response","results","error","console","log","length","map","author","content","nanoid","API_KEY","getTrendingList","axios","data","getMovieDetail","getMovieCast","getMovieSearch","query","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}